// Generated by `wit-bindgen` 0.37.0. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod exports {
  pub mod async_ {
    pub mod provider {

      #[allow(dead_code, unused_imports, clippy::all)]
      pub mod string_if {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_string_fn_cabi<T: Guest>() -> *mut u8 {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result0 = T::string_fn();
        let result = ::wit_bindgen_rt::async_support::first_poll(result0, |result1| {
          
          let vec2 = (result1.into_bytes()).into_boxed_slice();
          let ptr2 = vec2.as_ptr().cast::<u8>();
          let len2 = vec2.len();
          ::core::mem::forget(vec2);

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "[export]async:provider/string-if")]
          extern "C" {
            #[link_name = "[task-return]string-fn"]
            fn wit_import3(_: *mut u8, _: usize, );
          }

          #[cfg(not(target_arch = "wasm32"))]
          extern "C" fn wit_import3(_: *mut u8, _: usize, ){ unreachable!() }
          wit_import3(ptr2.cast_mut(), len2);
        });

        result
      }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn __callback_string_fn(ctx: *mut u8, event0: i32, event1: i32, event2: i32) -> i32 {
        ::wit_bindgen_rt::async_support::callback(ctx, event0, event1, event2)
      }
      pub trait Guest {
        /// Returns the name of the SaaS provider
        fn string_fn() -> impl ::core::future::Future<Output = _rt::String> + 'static;
      }
      #[doc(hidden)]

      macro_rules! __export_async_provider_string_if_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[unsafe(export_name = "[async]async:provider/string-if#string-fn")]
          unsafe extern "C" fn export_string_fn() -> *mut u8 {
            $($path_to_types)*::_export_string_fn_cabi::<$ty>()
          }
          #[unsafe(export_name = "[callback][async]async:provider/string-if#string-fn")]
          unsafe extern "C" fn _callback_string_fn(ctx: *mut u8, event0: i32, event1: i32, event2: i32) -> i32 {
            $($path_to_types)*::__callback_string_fn(ctx, event0, event1, event2)
          }
        };);
      }
      #[doc(hidden)]
      pub(crate) use __export_async_provider_string_if_cabi;

    }

  }
}
}
mod _rt {
  #![allow(dead_code, clippy::all)]

  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  pub use alloc_crate::string::String;
  extern crate alloc as alloc_crate;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_string_world_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::async_::provider::string_if::__export_async_provider_string_if_cabi!($ty with_types_in $($path_to_types_root)*::exports::async_::provider::string_if);
  )
}
#[doc(inline)]
pub(crate) use __export_string_world_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.37.0:async:provider:string-world:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 219] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07Y\x01A\x02\x01A\x02\x01\
B\x02\x01@\0\0s\x04\0\x09string-fn\x01\0\x04\0\x18async:provider/string-if\x05\0\
\x04\0\x1basync:provider/string-world\x04\0\x0b\x12\x01\0\x0cstring-world\x03\0\0\
\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.223.0\x10wit-bind\
gen-rust\x060.37.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

